#! /bin/zsh
source $DOT_FILES_DIR/zsh/functions
function colormap() {
  for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done
}

function create_secrets_dir_if_not_exists(){
  if [ ! -d $SECRETS_DIR ]; then
    printf "Creating secrets directory $SECRETS_DIR\n"
    mkdir -p $SECRETS_DIR
  fi
}
function create_secret_file_if_not_exists(){
  create_secrets_dir_if_not_exists
  if [ ! -f $SECRET_ENV_FILE ]; then
    touch  $SECRET_ENV_FILE
    echo "#! /bin/zsh" >> $SECRET_ENV_FILE && \
    echo "### This file was generated by the create_secret_env_var function" >> $SECRET_ENV_FILE && \
    echo "### Do not edit this file manually" >> $SECRET_ENV_FILE && \
    echo "### To add a new secret variable use the create_secret_env_var function" >> $SECRET_ENV_FILE && \
    echo "### To remove a secret variable use the remove_secret_env_var function" >> $SECRET_ENV_FILE && \
    echo "### To list all secret variables use the list_secret_env_vars function" >> $SECRET_ENV_FILE && \
    chmod u+r+x $SECRET_ENV_FILE
  fi
}
function create_secret_env_var(){
  local secret_name=$1
  local secret_value=$2

  echo "Creating secret $secret_name"
 
  # Check if the variable is already defined in the file
  if grep -q "^export $secret_name=" "$SECRET_ENV_FILE"; then
    printf "The secret variable '$secret_name' is already defined. Do you want to overwrite it? (y/n): "
    read overwrite
    if [ "$overwrite" != "y" ]; then
      echo "Operation canceled."
      return
    else
      # Remove any existing declaration of the variable
      awk -v var="$secret_name" '$0 !~ "^export "var"=" { print }' "$SECRET_ENV_FILE" > "$SECRET_ENV_FILE.tmp" && mv "$SECRET_ENV_FILE.tmp" "$SECRET_ENV_FILE"
    fi
  fi
  # Add the new declaration
  echo "export $secret_name=$secret_value" >> "$SECRET_ENV_FILE"
  reload_zsh
}
function create_microsoft_symbolic_link(){
  if [ ! -d ~/.microsoft ]; then
    echo "~/.microsoft directory does not exist. Ignoring creation of symbolik link."
  else
      if [ ! -d ~/Microsoft ]; then
        # Create a symbolic link from ~/.microsoft to ~/Microsoft
        ln -s ~/.microsoft ~/Microsoft
        echo "Symbolic link created from ~/.microsoft to ~/Microsoft"
      else
        echo "~/Microsoft directory already exists, skipping symbolic link creation"
      fi
  fi
}

function create_gcp_dir_if_not_exists(){
  if [ ! -d $GCP_DIR ]; then
    mkdir -p $GCP_DIR
  fi
}
function create_gcp_credentials_file(){
  local full_gcp_dir="$GCP_DIR/$1"
  local file_name=$2
  
  if [ ! -d $full_gcp_dir ]; then
    echo "Creating directory $full_gcp_dir"
    mkdir -p $full_gcp_dir
  fi
  local file_path="$full_gcp_dir/$file_name"
  if [ ! -f $file_path ]; then
    vi $file_path
  fi
}


function cat_secrets(){
  create_secret_file_if_not_exists
  cat $SECRET_ENV_FILE
}
function reload_zsh(){
  source ~/.zshrc
}
function source_zsh_recursive() {
  local folder="$1"

  if [ ! -d "$folder" ]; then
    echo "Folder '$folder' does not exist."
    return 1
  fi

  local zsh_files=($(find "$folder" -type f -name "*.zsh"))

  for file in "${zsh_files[@]}"; do
    source "$file"
    if [ $? -eq 0 ]; then
      echo "Sourced: $file"
    else
      echo "Failed to source: $file"
    fi
  done
}
function clear_terminal(){
  clear
}
function edit_dot_files(){
  nvim ~/dotfiles/
}
